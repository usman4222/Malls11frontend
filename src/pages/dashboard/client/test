import { zodResolver } from "@hookform/resolvers/zod";
import { useForm, FormProvider } from "react-hook-form";
import * as z from "zod";
import { Button } from "@/components/SiteComponents/ui/button";
import { Input } from "@/components/SiteComponents/ui/input";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/SiteComponents/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/SiteComponents/ui/select";
import { Textarea } from "@/components/SiteComponents/ui/textarea";
import { Calendar } from '@/components/SiteComponents/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/SiteComponents/ui/popover";
import { CalendarIcon, Instagram, Facebook, Linkedin, Twitter } from "lucide-react";
import { cn } from "@/lib/utils";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/SiteComponents/ui/card";
import { Separator } from "@/components/SiteComponents/ui/separator";
import { Country, State } from 'country-state-city';
import { useEffect, useState } from "react";
import { createUserProfile } from "@/actions/profile/profileAction";
import { useDispatch, useSelector } from "react-redux";
import { editProfileSchema } from "@/schemas/editProfileSchema";


const categories = [
  { id: 1, name: "Web Development" },
  { id: 2, name: "Graphic Design" },
  { id: 3, name: "Content Writing" },
  { id: 4, name: "Digital Marketing" },
  { id: 5, name: "Data Science" },
];

const genderOptions = ["Male", "Female", "Other"];

function EditProfileForm() {
  const dispatch = useDispatch();
  const [isLoading, setIsLoading] = useState(false);
  const [selectedImage, setSelectedImage] = useState(null);

  const form = useForm({
    resolver: zodResolver(editProfileSchema),
    defaultValues: {
      categories: "",
      gender: "",
      website: "",
      whatsappNumber: "",
      country: "",
      state: "",
      friendlyAddress: "",
      description: "",
      instagramUrl: "",
      facebookUrl: "",
      linkedinUrl: "",
      twitterUrl: "",
    },
  });

  const user = useSelector((state) => state.user);
  const token = user?.token;

  const onSubmit = async (data) => {
    console.log("Form Data:", data);

    try {
      setIsLoading(true);
      const formData = new FormData();

      Object.entries(data).forEach(([key, value]) => {
        formData.append(key, value);
      });

      const response = await dispatch(createUserProfile(formData, token));

      if (response?.success === false) {
        toast.error(response?.message || "Profile update failed");
        return;
      }

      toast.success("Profile updated successfully!");
    } catch (error) {
      const message =
        error.response?.data?.message ||
        error.message ||
        "Profile update failed. Please try again.";
      toast.error(message);
    } finally {
      setIsLoading(false);
    }
  };


  return (
    <div className="bg-[#F0EFEC] p-6">
      <p className="text-3xl font-semibold mb-6">Edit Profile</p>
      <FormProvider {...form}>
        <Card>
          <CardHeader>
            <CardTitle>My Profile</CardTitle>
          </CardHeader>
          <Separator />
          <CardContent>
            {/* <Form {...form}> */}
            <form onSubmit={form(onSubmit)} className="space-y-4">
              {/* Profile Picture */}
              {/* <FormField
                  control={form.control}
                  name="logoImage"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Profile Picture *</FormLabel>
                      <FormControl>
                        <div className="flex flex-col gap-2">
                          <input
                            type="file"
                            accept="image/*"
                            onChange={(e) => {
                              const file = e.target.files?.[0];
                              if (file) {
                                field.onChange(file);
                                setSelectedImage(URL.createObjectURL(file));
                              }
                            }}
                          />
                          {field.value && (
                            <span className="text-sm text-muted-foreground">
                              {field.value.name || "Image selected"}
                            </span>
                          )}
                          {selectedImage && (
                            <img
                              src={selectedImage}
                              alt="Preview"
                              className="h-20 w-20 rounded-full object-cover border"
                            />
                          )}
                        </div>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                /> */}

              {/* Website & Category */}
              <div className="grid md:grid-cols-2 gap-6">
                <FormField name="website" control={form.control} render={({ field }) => (
                  <FormItem>
                    <FormLabel>Website</FormLabel>
                    <FormControl>
                      <Input placeholder="https://yourwebsite.com" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
                <FormField name="categories" control={form.control} render={({ field }) => (
                  <FormItem>
                    <FormLabel>Category *</FormLabel>
                    <Select onValueChange={field.onChange}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select category" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {categories.map((cat) => (
                          <SelectItem key={cat.id} value={cat.name}>{cat.name}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )} />
              </div>

              {/* Location & Gender */}
              <div className="grid md:grid-cols-2 gap-6">
                <FormField name="country" control={form.control} render={({ field }) => (
                  <FormItem>
                    <FormLabel>Country *</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select country" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="PK">Pakistan</SelectItem>
                        <SelectItem value="IN">India</SelectItem>
                        <SelectItem value="US">United States</SelectItem>
                        <SelectItem value="UK">United Kingdom</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )} />
                <FormField name="state" control={form.control} render={({ field }) => (
                  <FormItem>
                    <FormLabel>State *</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select state" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Punjab">Punjab</SelectItem>
                        <SelectItem value="Sindh">Sindh</SelectItem>
                        <SelectItem value="California">California</SelectItem>
                        <SelectItem value="Texas">Texas</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )} />
              </div>

              <div className="grid md:grid-cols-2 gap-6">
                <FormField name="gender" control={form.control} render={({ field }) => (
                  <FormItem>
                    <FormLabel>Gender *</FormLabel>
                    <Select onValueChange={field.onChange}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select Gender" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {genderOptions.map((opt) => (
                          <SelectItem key={opt} value={opt}>{opt}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )} />
                <FormField name="whatsappNumber" control={form.control} render={({ field }) => (
                  <FormItem>
                    <FormLabel>WhatsApp Number *</FormLabel>
                    <FormControl>
                      <Input placeholder="Enter WhatsApp number" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
              </div>

              {/* Address */}
              <FormField name="friendlyAddress" control={form.control} render={({ field }) => (
                <FormItem>
                  <FormLabel>Address *</FormLabel>
                  <FormControl>
                    <Input placeholder="123 Main St, NY" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )} />

              {/* Description */}
              <FormField name="description" control={form.control} render={({ field }) => (
                <FormItem>
                  <FormLabel>About You *</FormLabel>
                  <FormControl>
                    <Textarea placeholder="Write something about yourself..." {...field} className="min-h-[120px]" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )} />

              {/* Social Links */}
              {["instagramUrl", "facebookUrl", "linkedinUrl", "twitterUrl"].map((social) => (
                <FormField key={social} name={social} control={form.control} render={({ field }) => (
                  <FormItem>
                    <FormLabel>{social.replace("Url", "")}</FormLabel>
                    <FormControl>
                      <Input placeholder={`Enter ${social.replace("Url", "")} URL`} {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )} />
              ))}

              {/* Submit */}
              <Button
                type="submit"
                className="mt-4 w-full"
                disabled={isLoading}
              >
                {isLoading ? "Saving..." : "Save Profile"}
              </Button>
            </form>
            {/* </Form> */}
          </CardContent>
        </Card>
      </FormProvider>
    </div>
  );
}

export default EditProfileForm;